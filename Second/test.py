import yara
import os

def first_callback(data):
    if 'matches' in data:
        matches = data['matches']
        if isinstance(matches, list):  # Check if matches is a list
            for match in matches:
                print("=" * 20)
                print(f"Matched rule: {match.rule}")
                print(f"Matched strings: {match.strings}")

                if match.rule == 'my_first_rule':
                    if all(key in match.strings for key in ['upx0', 'upx1', 'test', 'MZ_test']):
                        print("The file matches my_first_rule criteria (UPX detected, contains 'notepad', starts with 'MZ').")
                    else:
                        print("The file does not match my_first_rule criteria.")

                if match.rule == 'second_rule':
                    if 'a' in match.strings:
                        print("The file contains KERNEL32.")
                    else:
                        print("The file does not contain KERNEL32.")
        else:
            print("No matches found.")  # Handle case when matches is not a list
    else:
        print("No matches found.")

def detecting_yara(file_path, rule_path):
    if not os.path.exists(file_path):
        print(f"Error: File not found - {file_path}")
        return False

    if not os.path.exists(rule_path):
        print(f"Error: Rule file not found - {rule_path}")
        return False

    try:
        rules = yara.compile(rule_path)
        matches = rules.match(file_path, callback=first_callback)
        if matches is not None:  # Check if matches is not None before returning True
            return True
        else:
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

if __name__ == "__main__":
    rule_path = "C:/Users/kisia/Desktop/Coding/Second/my_first_rule.yar"
    file_paths = [
        "C:/Users/kisia/Desktop/Malicious Code sample/test_capa/816d7616238958dfe0bb811a063eb3102efd82eff14408f5cab4cb5258bfd019.exe",
        "C:/Users/kisia/Desktop/Malicious Code sample/test_capa/03385dfc614fe1210e8bf3d00d79290ddfc195d287549eeccb9044fc7e7aed53.exe",
        "C:/Users/kisia/Desktop/Malicious Code sample/test_capa/a57701a815cedcb39760af485ccbd047d3199757cc0d43f40b1655d822d4535e.exe",
        "C:/Users/kisia/Desktop/Malicious Code sample/test_capa/bdf33d8ce11a2f47cfe22ea317fa8b9b996ed84fad46670961aa9351b41180cb.exe",
        "C:/Users/kisia/Desktop/Malicious Code sample/test_capa/d6e3971840b3f33085e296244ac71e107ab81580147db1a13a72b81b2e7ac8e7.exe",
        # Add more file paths here as needed
    ]

    for file_path in file_paths:
        print(f"Analyzing file: {file_path}")
        if detecting_yara(file_path, rule_path):
            print("YARA rule matching completed.")
        else:
            print("YARA rule matching failed.")
        print()  # Add empty line for separation between file analyses
