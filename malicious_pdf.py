import os
import re
import zlib
import binascii
import yara
import hashlib
import argparse
from decimal import Decimal

def scan_pdf_with_yara_and_features(pdf_files, rule_file):
    try:
        # YARA rule 파일 로드
        rules = yara.compile(rule_file)

        for pdf_file in pdf_files:
            print(f"Scanning PDF: {pdf_file}")

            # PDF 파일 열기
            with open(pdf_file, 'rb') as f:
                pdf_data = f.read()

            # YARA rule 적용
            matches = rules.match(data=pdf_data)

            # 시그니처 확인을 위한 문자열 패턴 리스트
            signature_patterns = [
                b'%PDF-',    # PDF 파일 헤더
                b'obj',      # PDF 객체 키워드
                b'endobj',   # PDF 객체 종료 키워드
                b'stream',   # PDF 스트림 키워드
                b'endstream',# PDF 스트림 종료 키워드
                b'xref',     # PDF 크로스-리퍼런스 키워드
                b'trailer',  # PDF 트레일러 키워드
                b'startxref' # PDF 시작 참조 키워드
            ]

            # 시그니처 패턴 확인
            found_signatures = []
            for pattern in signature_patterns:
                if pattern in pdf_data:
                    found_signatures.append(pattern.decode())

            # YARA 매치 결과 확인
            if matches or found_signatures:
                print("악성 PDF 파일로 탐지되었습니다!")
                if matches:
                    for match in matches:
                        print("매치된 YARA 규칙:", match)
                if found_signatures:
                    print("찾은 시그니처 패턴:", found_signatures)

                # JavaScript 검사
                js_code = extract_js_from_pdf(pdf_data)
                if js_code:
                    print("검출된 JavaScript 코드:")
                    print(js_code)

                # 압축 데이터 추출 및 검사
                decompressed_data = extract_compressed_data_from_pdf(pdf_data)
                if decompressed_data:
                    print("추출된 압축 데이터:")
                    print(decompressed_data)

                # PDF 파일 정보 출력
                print("PDF 파일 정보:")
                print("파일 경로:", pdf_file)
                print("파일 크기:", os.path.getsize(pdf_file), "바이트")

            else:
                print("악성 PDF 파일이 아닙니다.")

    except yara.SyntaxError as e:
        print(f"YARA 구문 오류: {e}")
    except Exception as e:
        print(f"오류 발생: {e}")

def extract_js_from_pdf(pdf_data):
    # PDF 파일에서 JavaScript 코드 추출
    js_code = ""
    matches = re.findall(rb'\/S\/JavaScript\/JS.*?endstream', pdf_data)
    for match in matches:
        js_code += match.decode('utf-8', errors='ignore') + "\n"
    return js_code.strip()

def extract_compressed_data_from_pdf(pdf_data):
    # PDF 파일에서 압축 데이터 추출
    decompressed_data = ""
    matches = re.findall(rb'\/Filter\s*\/(\w+)', pdf_data)
    for filter_type in matches:
        if filter_type == b'FlateDecode':
            try:
                compressed_data = re.search(rb'(?<=stream\s*\n).*?(?=\n\s*endstream)', pdf_data, re.DOTALL).group(0)
                decompressed_data = zlib.decompress(compressed_data)
            except:
                pass
            
    return decompressed_data

if __name__ == "__main__":
    pdf_files = [
        "C:/Users/kty18/Desktop/Malicious_code/test_data/0a1332f55c43a59f751862555af5cb81918ebc8b3ec036e4f20107fcbcb61fb3.pdf",
        "C:/Users/kty18/Desktop/Malicious_code/test_data/0a01897c65dbab402d6dbb6b40b4c7e71fe45660b8f2099427f9bed41369ed51.pdf",
        "C:/Users/kty18/Desktop/Malicious_code/test_data/0a2386b951f4eb49af8a9df82f73b994d4ab77d9b2e837b82be13c6056decedc.pdf",
        "C:/Users/kty18/Desktop/Malicious_code/test_data/0a4254f24556eadf0a5c95dc4aa54361a988a098482152e3bb13f1ef83df59fb.pdf",
        "C:/Users/kty18/Desktop/Malicious_code/test_data/0a5768f609026ca622fe8f765b5c046c08f35248b9d6412dfde222832f3c98ab.pdf",
    ]
    rule_file = "C:/Users/kty18/Desktop/Coding/malicious_pdf_rule.yar"
    scan_pdf_with_yara_and_features(pdf_files, rule_file)
