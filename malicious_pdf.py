import os
import re
import zlib
import binascii
import yara
import hashlib
import argparse
from decimal import Decimal

def scan_pdf_with_yara_and_features(pdf_files, rule_file):
    try:
        # Load YARA rule file
        rules = yara.compile(rule_file)

        for pdf_file in pdf_files:
            print(f"Scanning PDF: {pdf_file}")

            # Open PDF file
            with open(pdf_file, 'rb') as f:
                pdf_data = f.read()

            # Apply YARA rules
            matches = rules.match(data=pdf_data)

            # List of string patterns for signature verification
            signature_patterns = [
                b'%PDF-',    # PDF file header
                b'obj',      # PDF object keyword
                b'endobj',   # PDF object end keyword
                b'stream',   # PDF stream keyword
                b'endstream',# PDF stream end keyword
                b'xref',     # PDF cross-reference keyword
                b'trailer',  # PDF trailer keyword
                b'startxref' # PDF start reference keyword
            ]

            # Signature pattern verification
            found_signatures = []
            for pattern in signature_patterns:
                if pattern in pdf_data:
                    found_signatures.append(pattern.decode())

            # Check YARA match results
            if matches or found_signatures:
                print("Detected as a malicious PDF file!")
                if matches:
                    for match in matches:
                        print("Matched YARA rule:", match)
                if found_signatures:
                    print("Found signature patterns:", found_signatures)

                # JavaScript inspection
                js_code = extract_js_from_pdf(pdf_data)
                if js_code:
                    print("Detected JavaScript code:")
                    print(js_code)

                # Extract and inspect compressed data
                decompressed_data = extract_compressed_data_from_pdf(pdf_data)
                if decompressed_data:
                    print("Extracted compressed data:")
                    print(decompressed_data)

                # Print PDF file information
                print("PDF file information:")
                print("File path:", pdf_file)
                print("File size:", os.path.getsize(pdf_file), "bytes")

            else:
                print("Not a malicious PDF file.")

    except yara.SyntaxError as e:
        print(f"YARA syntax error: {e}")
    except Exception as e:
        print(f"Error occurred: {e}")

def extract_js_from_pdf(pdf_data):
    # Extract JavaScript code from PDF file
    js_code = ""
    matches = re.findall(rb'\/S\/JavaScript\/JS.*?endstream', pdf_data)
    for match in matches:
        js_code += match.decode('utf-8', errors='ignore') + "\n"
    return js_code.strip()

def extract_compressed_data_from_pdf(pdf_data):
    # Extract compressed data from PDF file
    decompressed_data = ""
    matches = re.findall(rb'\/Filter\s*\/(\w+)', pdf_data)
    for filter_type in matches:
        if filter_type == b'FlateDecode':
            try:
                compressed_data = re.search(rb'(?<=stream\s*\n).*?(?=\n\s*endstream)', pdf_data, re.DOTALL).group(0)
                decompressed_data = zlib.decompress(compressed_data)
            except:
                pass
            
    return decompressed_data

if __name__ == "__main__":
    pdf_files = "C:/Users/kty18/Desktop/Malicious_code/test_data/0a1332f55c43a59f751862555af5cb81918ebc8b3ec036e4f20107fcbcb61fb3.pdf",
    rule_file = "C:/Users/kty18/Desktop/Coding/malicious_pdf_rule_simple.yar"
    scan_pdf_with_yara_and_features(pdf_files, rule_file)
